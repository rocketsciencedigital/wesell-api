openapi: 3.0.0
info:
  title: store api
  version: '0.1'
  description: Inital definitions for the app
servers:
  - url: ' http://127.0.0.1:4010'
    description: Prsim
paths:
  '/user/{userid}':
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
    get:
      summary: Get User
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-Model'
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      operationId: get-users-userid
      parameters: []
      security:
        - 'Bearer: jwtToken': []
      description: Get the requested user information
    patch:
      summary: Update User
      operationId: patch-user-userid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-Model'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      security:
        - 'Bearer: jwtToken': []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
  /auth/login:
    post:
      summary: Login
      operationId: post-auth-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User-Model'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                required:
                  - user
                  - token
            application/xml:
              schema:
                type: object
                properties: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
  /account:
    parameters: []
    patch:
      summary: Update Account
      operationId: patch-account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account-Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                account:
                  $ref: '#/components/schemas/Account-Request'
    get:
      summary: Get Account
      operationId: get-account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account-Response'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
        description: ''
      security:
        - 'Bearer: jwtToken': []
    delete:
      summary: Delete Account
      operationId: delete-account
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      description: |-
        Delete an account.

        Deleting an account will also delete all Stores and Products from the system
    post:
      summary: Create Account
      operationId: post-account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account-Response'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  $ref: '#/components/schemas/Account-Request'
                owner_id:
                  type: string
  /auth:
    post:
      summary: Create Authentication
      operationId: post-auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                required:
                  - token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      description: Create an authentication
  /store:
    parameters: []
    get:
      summary: Get Store
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store-Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      operationId: get-store-storeid
      security:
        - 'Bearer: jwtToken': []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
    patch:
      summary: Update Store
      operationId: patch-store-storeid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store-Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store-Update'
    post:
      summary: Create Store
      operationId: post-store
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store-Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store-Create'
      description: ''
      security:
        - 'Bearer: jwtToken': []
    delete:
      summary: Delete Store
      operationId: delete-store
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
      description: This will remove the store and all asociated products
  '/account/{accountId}/stores':
    parameters:
      - schema:
          type: string
        name: accountId
        in: path
        required: true
    get:
      summary: List Accounts Stores
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store-Response'
      operationId: get-account-accountId-liststores
      security:
        - 'Bearer: jwtToken': []
      description: List all the stores in the account
  '/store/{storeid}/publish':
    parameters:
      - schema:
          type: string
        name: storeid
        in: path
        required: true
    get:
      summary: Publish the Store
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store-Response'
      operationId: get-store-storeid-publish
      security:
        - 'Bearer: jwtToken': []
      description: This  publishes the store live to the web
  '/store/{storeid}/logo':
    parameters:
      - schema:
          type: string
        name: storeid
        in: path
        required: true
    post:
      summary: Create Store Logo
      operationId: post-store-storeid-logo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store-Response'
      requestBody:
        description: ''
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
    patch:
      summary: Update Store Logo
      operationId: patch-store-storeid-logo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store-Response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      security:
        - 'Bearer: jwtToken': []
    delete:
      summary: Delete Store Logo
      operationId: delete-store-storeid-logo
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/Error-Model'
      description: Removes the logo from the store
  '/store/{storeid}/product':
    parameters:
      - schema:
          type: string
        name: storeid
        in: path
        required: true
    get:
      summary: Get Product
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product-Model'
      operationId: get-store-storeid-product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product-Model'
    post:
      summary: Create Product
      operationId: post-store-storeid-product
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
    patch:
      summary: ''
      operationId: patch-store-storeid-product
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
components:
  schemas:
    User-Model:
      title: User-Model
      type: object
      properties:
        id:
          type: string
          example: c4f63571-1b6f-401e-9832-0bbeb3ffb78b
        first_name:
          type: string
          example: Paul
        last_name:
          type: string
          example: Sanderson
      required:
        - first_name
        - last_name
    Account-Response:
      title: Account-Model
      type: object
      description: ''
      properties:
        id:
          type: string
          example: da46a6d3-71ce-4647-9a10-13b68135e649
        account_name:
          type: string
        owner:
          $ref: '#/components/schemas/User-Model'
      required:
        - account_name
        - owner
    Error-Model:
      title: Error-Model
      type: object
      properties:
        key:
          type: string
        status:
          type: integer
        error:
          type: string
      required:
        - key
        - status
        - error
    Store-Response:
      title: Store-Response
      type: object
      properties:
        id:
          type: string
        publish_version:
          type: integer
        logo_url:
          type: string
        store_name:
          type: string
        store_url:
          type: string
        store_description:
          type: string
        store_theme:
          type: string
    Product-Model:
      title: Product-Model
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: string
        image_urls:
          type: array
          items:
            type: string
        quantity:
          type: string
        state:
          type: string
          enum:
            - Active
            - SoldOut
            - Archived
      required:
        - name
    Account-Request:
      title: Account-Request
      type: object
      properties:
        account_name:
          type: string
        '':
          type: string
    Store-Create:
      title: Store-Create
      type: object
      properties:
        store_name:
          type: string
        store_description:
          type: string
        store_theme:
          type: string
      required:
        - store_name
    Store-Update:
      title: Store-Update
      type: object
      properties:
        store_name:
          type: string
        store_description:
          type: string
        store_theme:
          type: string
  securitySchemes:
    'Bearer: jwtToken':
      name: Authorzation
      type: apiKey
      in: header
